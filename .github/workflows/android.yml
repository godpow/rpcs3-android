name: Android Build

on:
  push:
    branches: [ "master", "main" ]
  pull_request:
    branches: [ "master", "main" ]
  workflow_dispatch:  # Allows manual triggering

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        submodules: 'recursive'  # Clone submodules recursively
        
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v2
      
    - name: Cache Android SDK
      uses: actions/cache@v3.4.2
      with:
        path: |
          ${{ env.ANDROID_HOME }}/platforms
          ${{ env.ANDROID_HOME }}/build-tools
          ${{ env.ANDROID_HOME }}/platform-tools
        key: ${{ runner.os }}-android-sdk-${{ hashFiles('app/build.gradle.kts') }}
        restore-keys: |
          ${{ runner.os }}-android-sdk-
      
    - name: Install NDK and CMake
      uses: nttld/setup-ndk@v1.5.0
      id: setup-ndk
      with:
        ndk-version: 'r27'
        add-to-path: true
        link-to-sdk: true
        local-cache: true
        
    - name: Cache NDK
      uses: actions/cache@v3
      with:
        path: ${{ steps.setup-ndk.outputs.ndk-path }}
        key: ${{ runner.os }}-ndk-${{ hashFiles('app/build.gradle.kts') }}-${{ hashFiles('app/src/main/cpp/CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-ndk-
        
    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v1.14
      with:
        cmake-version: '3.22.1'  # Using a more compatible CMake version
        
    - name: Install Ninja build system
      run: sudo apt-get update && sudo apt-get install -y ninja-build
        
    - name: Fix NDK symlinks and verify installation
      run: |
        echo "NDK path: ${{ steps.setup-ndk.outputs.ndk-path }}"
        # Navigate to the bin directory
        cd ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin
        ls -la
        
        # Check if clang is a script or binary
        if [ -f "clang" ]; then
          file_type=$(file clang)
          echo "Clang file type: $file_type"
          
          # If clang is a shell script, we need to fix it
          if [[ $file_type == *"shell script"* ]]; then
            echo "Detected clang as a shell script, fixing..."
            
            # Rename the original clang script
            mv clang clang-tidy.sh
            
            # Create a new clang wrapper script that will properly call the real clang
            echo '#!/bin/bash' > clang
            echo '# This is a wrapper script to call the real clang compiler' >> clang
            echo '# Find the real clang binary' >> clang
            echo 'for binary in clang-1* clang-2*; do' >> clang
            echo '  if [ -f "$binary" ] && [ -x "$binary" ]; then' >> clang
            echo '    exec "$binary" "$@"' >> clang
            echo '    exit $?' >> clang
            echo '  fi' >> clang
            echo 'done' >> clang
            echo '# Fallback to direct execution if we cannot find the real clang' >> clang
            echo 'exec "$(dirname "$0")/clang-tidy.sh" "$@" -- ' >> clang
            chmod +x clang
            
            # Do the same for clang++
            echo '#!/bin/bash' > clang++
            echo '# This is a wrapper script to call the real clang++ compiler' >> clang++
            echo '# Find the real clang++ binary' >> clang++
            echo 'for binary in clang++-1* clang++-2*; do' >> clang++
            echo '  if [ -f "$binary" ] && [ -x "$binary" ]; then' >> clang++
            echo '    exec "$binary" "$@"' >> clang++
            echo '    exit $?' >> clang++
            echo '  fi' >> clang++
            echo 'done' >> clang++
            echo '# Fallback to direct execution' >> clang++
            echo 'exec "$(dirname "$0")/clang-tidy.sh" "$@" -- ' >> clang++
            chmod +x clang++
          fi
        else
          echo "Clang binary not found, searching for alternatives..."
          # Find clang binaries
          CLANG_BINARIES=$(find . -name "clang-*" -type f -executable | sort)
          echo "Found clang binaries: $CLANG_BINARIES"
          
          # Use the first one as clang
          FIRST_CLANG=$(echo "$CLANG_BINARIES" | head -1)
          if [ -n "$FIRST_CLANG" ]; then
            ln -sf $(basename $FIRST_CLANG) clang
            echo "Created symlink from $(basename $FIRST_CLANG) to clang"
          fi
          
          # Find clang++ binaries
          CLANGPP_BINARIES=$(find . -name "clang++-*" -type f -executable | sort)
          echo "Found clang++ binaries: $CLANGPP_BINARIES"
          
          # Use the first one as clang++
          FIRST_CLANGPP=$(echo "$CLANGPP_BINARIES" | head -1)
          if [ -n "$FIRST_CLANGPP" ]; then
            ln -sf $(basename $FIRST_CLANGPP) clang++
            echo "Created symlink from $(basename $FIRST_CLANGPP) to clang++"
          else
            # If no clang++ found, link clang to clang++
            ln -sf clang clang++
            echo "Created symlink from clang to clang++"
          fi
        fi
        
        # Create other necessary symlinks
        if [ -f "lld" ]; then
          ln -sf lld ld.lld
          ln -sf lld ld64.lld
          ln -sf lld lld-link
          ln -sf lld wasm-ld
        fi
        
        if [ -f "llvm-ar" ]; then
          ln -sf llvm-ar llvm-ranlib
          ln -sf llvm-ar llvm-lib
          ln -sf llvm-ar llvm-dlltool
        fi
        
        if [ -f "llvm-objcopy" ]; then
          ln -sf llvm-objcopy llvm-strip
        fi
        
        if [ -f "llvm-readobj" ]; then
          ln -sf llvm-readobj llvm-readelf
        fi
        
        if [ -f "llvm-symbolizer" ]; then
          ln -sf llvm-symbolizer llvm-addr2line
        fi
        
        if [ -f "llvm-rc" ]; then
          ln -sf llvm-rc llvm-windres
        fi
        
        # Verify symlinks
        ls -la
        
        # Verify compiler functionality
        echo "Testing clang compiler..."
        echo 'int main() { return 0; }' > test.c
        ./clang test.c -o test || echo "Clang compiler test failed"
        
        # Check if clang-tidy.sh exists and examine it
        if [ -f "clang-tidy.sh" ]; then
          echo "Contents of clang-tidy.sh:"
          cat clang-tidy.sh
        fi
        
    - name: Create tidy file directory
      run: |
        mkdir -p ${{ github.workspace }}/build
        touch ${{ github.workspace }}/build/clang-tidy-output.txt
        chmod 666 ${{ github.workspace }}/build/clang-tidy-output.txt
        
    - name: Create direct clang binaries
      run: |
        # Find the real clang binaries
        NDK_BIN_DIR="${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin"
        
        # Find real clang binaries
        REAL_CLANG=$(find ${NDK_BIN_DIR} -name "clang-*" -type f -executable | sort | head -1)
        REAL_CLANGPP=$(find ${NDK_BIN_DIR} -name "clang++-*" -type f -executable | sort | head -1)
        
        if [ -z "$REAL_CLANG" ]; then
          echo "No real clang binary found, using fallback"
          REAL_CLANG="${NDK_BIN_DIR}/clang-14"
        fi
        
        if [ -z "$REAL_CLANGPP" ]; then
          echo "No real clang++ binary found, using fallback"
          REAL_CLANGPP="${NDK_BIN_DIR}/clang++-14"
        fi
        
        # Create direct clang binaries in a new directory
        mkdir -p ${{ github.workspace }}/direct-clang/bin
        
        if [ -f "${NDK_BIN_DIR}/clang-tidy.sh" ]; then
          echo "Creating direct clang wrappers to bypass clang-tidy.sh"
          
          # Create direct clang wrapper using echo statements
          echo '#!/bin/bash' > ${{ github.workspace }}/direct-clang/bin/clang
          echo '# Direct clang wrapper' >> ${{ github.workspace }}/direct-clang/bin/clang
          echo "if [ -f \"$REAL_CLANG\" ]; then" >> ${{ github.workspace }}/direct-clang/bin/clang
          echo "  exec \"$REAL_CLANG\" \"\$@\"" >> ${{ github.workspace }}/direct-clang/bin/clang
          echo "else" >> ${{ github.workspace }}/direct-clang/bin/clang
          echo "  # Fallback to original with environment variables set" >> ${{ github.workspace }}/direct-clang/bin/clang
          echo "  export CLANG_CMD=clang" >> ${{ github.workspace }}/direct-clang/bin/clang
          echo "  export TIDY_FILE=\"${{ github.workspace }}/build/clang-tidy-output.txt\"" >> ${{ github.workspace }}/direct-clang/bin/clang
          echo "  export TIDY_TIMEOUT=300" >> ${{ github.workspace }}/direct-clang/bin/clang
          echo "  exec \"${NDK_BIN_DIR}/clang-tidy.sh\" \"\$@\" -- " >> ${{ github.workspace }}/direct-clang/bin/clang
          echo "fi" >> ${{ github.workspace }}/direct-clang/bin/clang
          chmod +x ${{ github.workspace }}/direct-clang/bin/clang
          
          # Create direct clang++ wrapper using echo statements
          echo '#!/bin/bash' > ${{ github.workspace }}/direct-clang/bin/clang++
          echo '# Direct clang++ wrapper' >> ${{ github.workspace }}/direct-clang/bin/clang++
          echo "if [ -f \"$REAL_CLANGPP\" ]; then" >> ${{ github.workspace }}/direct-clang/bin/clang++
          echo "  exec \"$REAL_CLANGPP\" \"\$@\"" >> ${{ github.workspace }}/direct-clang/bin/clang++
          echo "else" >> ${{ github.workspace }}/direct-clang/bin/clang++
          echo "  # Fallback to original with environment variables set" >> ${{ github.workspace }}/direct-clang/bin/clang++
          echo "  export CLANG_CMD=clang++" >> ${{ github.workspace }}/direct-clang/bin/clang++
          echo "  export TIDY_FILE=\"${{ github.workspace }}/build/clang-tidy-output.txt\"" >> ${{ github.workspace }}/direct-clang/bin/clang++
          echo "  export TIDY_TIMEOUT=300" >> ${{ github.workspace }}/direct-clang/bin/clang++
          echo "  exec \"${NDK_BIN_DIR}/clang-tidy.sh\" \"\$@\" -- " >> ${{ github.workspace }}/direct-clang/bin/clang++
          echo "fi" >> ${{ github.workspace }}/direct-clang/bin/clang++
          chmod +x ${{ github.workspace }}/direct-clang/bin/clang++
        else
          echo "No clang-tidy.sh found, creating symlinks to original clang"
          ln -sf "${NDK_BIN_DIR}/clang" ${{ github.workspace }}/direct-clang/bin/clang
          ln -sf "${NDK_BIN_DIR}/clang++" ${{ github.workspace }}/direct-clang/bin/clang++
        fi
        
        # Test the direct clang
        echo "Testing direct clang..."
        echo 'int main() { return 0; }' > ${{ github.workspace }}/test.c
        ${{ github.workspace }}/direct-clang/bin/clang ${{ github.workspace }}/test.c -o ${{ github.workspace }}/test || echo "Direct clang test failed"
        
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
        
    - name: Setup Gradle
      uses: gradle/gradle-build-action@749f47bda3e44aa060e82d7b3ef7e40d953bd629
      with:
        gradle-version: wrapper
        cache-read-only: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/master' }}
        
    - name: Build with Gradle
      run: |
        # Execute Gradle build with required environment variables
        ./gradlew assembleDebug --build-cache --info
      env:
        ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
        CC: ${{ github.workspace }}/direct-clang/bin/clang
        CXX: ${{ github.workspace }}/direct-clang/bin/clang++
        CLANG_CMD: clang
        TIDY_FILE: ${{ github.workspace }}/build/clang-tidy-output.txt
        TIDY_TIMEOUT: 300
        # Export these variables to make them available to subprocesses
        CMAKE_C_COMPILER: ${{ github.workspace }}/direct-clang/bin/clang
        CMAKE_CXX_COMPILER: ${{ github.workspace }}/direct-clang/bin/clang++
        
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: rpcs3-android-debug
        path: app/build/outputs/apk/debug/app-debug.apk 
