name: Android Build

on:
  push:
    branches: [ "master", "main" ]
  pull_request:
    branches: [ "master", "main" ]
  workflow_dispatch:  # Allows manual triggering

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        submodules: 'recursive'  # Clone submodules recursively
        
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v2
      
    - name: Cache Android SDK
      uses: actions/cache@v3.4.2
      with:
        path: |
          ${{ env.ANDROID_HOME }}/platforms
          ${{ env.ANDROID_HOME }}/build-tools
          ${{ env.ANDROID_HOME }}/platform-tools
        key: ${{ runner.os }}-android-sdk-${{ hashFiles('app/build.gradle.kts') }}
        restore-keys: |
          ${{ runner.os }}-android-sdk-
      
    - name: Install NDK and CMake
      uses: nttld/setup-ndk@v1.5.0
      id: setup-ndk
      with:
        ndk-version: 'r27'
        add-to-path: true
        link-to-sdk: true
        local-cache: true
        
    - name: Cache NDK
      uses: actions/cache@v3
      with:
        path: ${{ steps.setup-ndk.outputs.ndk-path }}
        key: ${{ runner.os }}-ndk-${{ hashFiles('app/build.gradle.kts') }}-${{ hashFiles('app/src/main/cpp/CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-ndk-
        
    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v1.14
      with:
        cmake-version: '3.22.1'  # Using a more compatible CMake version
        
    - name: Install Ninja build system
      run: sudo apt-get update && sudo apt-get install -y ninja-build
        
    - name: Fix NDK symlinks and verify installation
      run: |
        echo "NDK path: ${{ steps.setup-ndk.outputs.ndk-path }}"
        # Create proper symlinks for clang and clang++
        cd ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin
        ls -la
        
        # Remove broken symlinks
        find . -type l -exec test ! -e {} \; -delete
        
        # Create correct symlinks
        if [ -f "clang-14" ]; then
          ln -sf clang-14 clang
        elif [ -f "clang-15" ]; then
          ln -sf clang-15 clang
        else
          # Find the actual clang binary
          CLANG_BIN=$(find . -name "clang-*" -type f -executable | head -1)
          if [ -n "$CLANG_BIN" ]; then
            ln -sf $(basename $CLANG_BIN) clang
          fi
        fi
        
        # Create clang++ symlink
        ln -sf clang clang++
        
        # Create other necessary symlinks
        if [ -f "lld" ]; then
          ln -sf lld ld.lld
          ln -sf lld ld64.lld
          ln -sf lld lld-link
          ln -sf lld wasm-ld
        fi
        
        if [ -f "llvm-ar" ]; then
          ln -sf llvm-ar llvm-ranlib
          ln -sf llvm-ar llvm-lib
          ln -sf llvm-ar llvm-dlltool
        fi
        
        if [ -f "llvm-objcopy" ]; then
          ln -sf llvm-objcopy llvm-strip
        fi
        
        if [ -f "llvm-readobj" ]; then
          ln -sf llvm-readobj llvm-readelf
        fi
        
        if [ -f "llvm-symbolizer" ]; then
          ln -sf llvm-symbolizer llvm-addr2line
        fi
        
        if [ -f "llvm-rc" ]; then
          ln -sf llvm-rc llvm-windres
        fi
        
        # Verify symlinks
        ls -la
        
        # Verify compiler functionality
        echo "Testing clang compiler..."
        echo 'int main() { return 0; }' > test.c
        ./clang test.c -o test || echo "Clang compiler test failed"
        
        # Check if clang-tidy.sh exists and examine it
        if [ -f "clang-tidy.sh" ]; then
          echo "Contents of clang-tidy.sh:"
          cat clang-tidy.sh
        fi
        
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
        
    - name: Setup Gradle
      uses: gradle/gradle-build-action@749f47bda3e44aa060e82d7b3ef7e40d953bd629
      with:
        gradle-version: wrapper
        cache-read-only: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/master' }}
        
    - name: Build with Gradle
      run: |
        # Create empty tidy file to satisfy clang-tidy.sh requirements
        mkdir -p ${{ github.workspace }}/build
        touch ${{ github.workspace }}/build/clang-tidy-output.txt
        
        # Execute Gradle build with required environment variables
        ./gradlew assembleDebug --build-cache --info
      env:
        ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
        CC: ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/clang
        CXX: ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/clang++
        CLANG_CMD: clang
        TIDY_FILE: ${{ github.workspace }}/build/clang-tidy-output.txt
        TIDY_TIMEOUT: 300
      
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: rpcs3-android-debug
        path: app/build/outputs/apk/debug/app-debug.apk 
